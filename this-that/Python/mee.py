import asyncio
import json
import uuid
import typing
import websockets
# this is for passing initialization arguments (from JS)
import sys

# first argument is autogenerated by Python-Shell, ignore
print(f'Init args: {sys.argv[1:]}')

# Dictionary to keep track of subscriptions that occur.
_SUBSCRIPTIONS: typing.Dict[str, typing.List[typing.Any]] = {}

async def subscribe_callback(websocket, event_name: str, callback,) -> str:
    if not isinstance(event_name, str):
        raise TypeError("expected 'str' for event_name")

    evt_id = uuid.uuid4().hex

    message = {
        "header": {
            "messagePurpose": "subscribe",
            "messageType": "commandRequest",
            "requestId": evt_id,
            "version": 1,
        },
        "body": {"eventName": event_name, "version": 1},
    }

    await websocket.send(json.dumps(message))
    _SUBSCRIPTIONS.setdefault(event_name, []).append((evt_id, callback))
    return evt_id

async def execute_command(websocket, command: str, *args):
    if not isinstance(command, str):
        raise TypeError("expected 'str' for command")

    if args:
        command += " " + " ".join(str(a) for a in args if a is not None)

    req_id = uuid.uuid4().hex
    message = {
        "header": {
            "messagePurpose": "commandRequest",
            "messageType": "commandRequest",
            "requestId": req_id,
            "version": 1,
        },
        "body": {"commandLine": command, "version": 1},
    }

    await websocket.send(json.dumps(message))

def handle_block_placed(response):
    # Properties we care about.
    if (response['eventName'] == "BlockPlaced"):
        print(f'Block: {response["properties"]["Block"]}')
        print(f'Placement: {response["properties"]["PlacementMethod"]}')
        print(f'Item: {response["properties"]["ToolItemType"]}')
        # print(f'Test: {response["properties"]}')

def on_response(response_str):
    response = json.loads(response_str)
    header = response["header"]
    body = response["body"]

    if header.get("messagePurpose") == "event":
        event_name = body.get("eventName")
        subs = list(_SUBSCRIPTIONS.get(event_name) or [])
        for evt_id, sub in subs:
            sub(body)

async def listen_for_selection(websocket):
    return await websocket.recv()

async def startup(websocket, path):
    test_file = open("test.txt", "a")
    test_file.write("Connection Established!\n")
    
    event_selected = "no_event"
    event_selected = await listen_for_selection(websocket)
    test_file.write(f"{event_selected}\n")

    if event_selected in {"BlockPlaced", "ItemSmelted"}:
        await subscribe_callback(websocket, event_selected, handle_block_placed)
    
    try:
        # Handle any message recieved.
        async for message in websocket:
            test_file.write(f"message: {message}\n")
            on_response(message)
            data = json.loads(message)
            with open("events.json", "a") as json_file:
                json.dump(data, json_file) # data / message something might be weird
    except:
        raise

print("/connect localhost:8765")
start_server = websockets.serve(
    startup,
    "localhost",
    8765,
    subprotocols=["com.microsoft.minecraft.wsencrypt"],
    ping_interval=None)

asyncio.get_event_loop().run_until_complete(start_server)
asyncio.get_event_loop().run_forever()